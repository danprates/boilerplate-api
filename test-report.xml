<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/mnt/Library/workspace/boilerplates/api/src/main/routes/users.routes.integration.ts">
    <testCase name="/users routes GET /users Should return a list of users" duration="62"/>
    <testCase name="/users routes GET /users Should return a empty list when no exist users" duration="8"/>
    <testCase name="/users routes POST /users Should return a created user" duration="23"/>
    <testCase name="/users routes GET /users/:id Should return an user" duration="9"/>
    <testCase name="/users routes GET /users/:id Should return not found when user does not exist" duration="7"/>
    <testCase name="/users routes PUT /users/:id Should update a user" duration="13"/>
    <testCase name="/users routes PUT /users/:id Should return not found when user does not exist" duration="6"/>
    <testCase name="/users routes DELETE /users/:id Should soft delete an user" duration="12"/>
    <testCase name="/users routes DELETE /users/:id Should return not found when user does not exist" duration="6"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/infra/databases/typeorm/repositories/base.repository.integration.ts">
    <testCase name="BaseRepository create should create a new user" duration="5"/>
    <testCase name="BaseRepository list should return a list of users" duration="4"/>
    <testCase name="BaseRepository list should return an empty list when does not exist users" duration="2"/>
    <testCase name="BaseRepository find should return an user" duration="5"/>
    <testCase name="BaseRepository find should return undefined when does not exist user" duration="1"/>
    <testCase name="BaseRepository update should update the user" duration="4"/>
    <testCase name="BaseRepository update should return undefined when does not exist user" duration="1"/>
    <testCase name="BaseRepository softDelete should softDelete the user" duration="6"/>
    <testCase name="BaseRepository softDelete should return undefined when does not exist user" duration="1"/>
    <testCase name="BaseRepository hardDelete should hardDelete the user" duration="4"/>
    <testCase name="BaseRepository hardDelete should return undefined when does not exist user" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/presentation/controllers/base/update-base.controller.unit.ts">
    <testCase name="FindBase Controller Should call usecase with correct values" duration="2"/>
    <testCase name="FindBase Controller Should return status code 400 if request is invalid" duration="1"/>
    <testCase name="FindBase Controller Should return status code 404 if data was not found" duration="1"/>
    <testCase name="FindBase Controller Should return status code 204 when correct params are provided" duration="0"/>
    <testCase name="FindBase Controller Should return status code 500 if any dependency throws" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/presentation/controllers/base/find-base.controller.unit.ts">
    <testCase name="FindBase Controller Should call usecase with correct values" duration="1"/>
    <testCase name="FindBase Controller Should return status code 400 if request is invalid" duration="1"/>
    <testCase name="FindBase Controller Should return status code 404 if data was not found" duration="2"/>
    <testCase name="FindBase Controller Should return status code 200 when correct params are provided" duration="1"/>
    <testCase name="FindBase Controller Should return status code 500 if any dependency throws" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/presentation/controllers/base/create-base.controller.unit.ts">
    <testCase name="CreateBase Controller Should call usecase with correct values" duration="7"/>
    <testCase name="CreateBase Controller Should call validation with correct values" duration="0"/>
    <testCase name="CreateBase Controller Should return 400 if validation returns fail result" duration="1"/>
    <testCase name="CreateBase Controller Should return status code 201 when correct params are provided" duration="1"/>
    <testCase name="CreateBase Controller Should return status code 500 if any dependency throws" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/presentation/controllers/base/delete-base.controller.unit.ts">
    <testCase name="DeleteBase Controller Should call usecase with correct values" duration="1"/>
    <testCase name="DeleteBase Controller Should return status code 400 if request is invalid" duration="1"/>
    <testCase name="DeleteBase Controller Should return status code 404 if data was not found" duration="1"/>
    <testCase name="DeleteBase Controller Should return status code 204 when correct params are provided" duration="0"/>
    <testCase name="DeleteBase Controller Should return status code 500 if any dependency throws" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/presentation/controllers/base/list-base.controller.unit.ts">
    <testCase name="FindBase Controller Should call usecase with correct values" duration="1"/>
    <testCase name="FindBase Controller Should return status code 400 if request is invalid" duration="1"/>
    <testCase name="FindBase Controller Should return status code 200 when correct params are provided" duration="1"/>
    <testCase name="FindBase Controller Should return status code 500 if any dependency throws" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/presentation/helpers/http.helper.unit.ts">
    <testCase name="HTTPHelper should return correct values when ok is called" duration="1"/>
    <testCase name="HTTPHelper should return correct values when created is called" duration="1"/>
    <testCase name="HTTPHelper should return bad request when ErrorModel.invalidParams is called" duration="0"/>
    <testCase name="HTTPHelper should return correct values when noContent is called" duration="1"/>
    <testCase name="HTTPHelper should return correct values when unauthorized is called" duration="9"/>
    <testCase name="HTTPHelper should return correct values when notFound is called" duration="2"/>
    <testCase name="HTTPHelper should return correct values when serverError is called" duration="1"/>
    <testCase name="HTTPHelper should return default values when resultErrorHandler is called without any error" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/services/usecases/base/db-update-base.usecase.unit.ts">
    <testCase name="DbUpdateBase Usecase Should call UpdateRepository with correct values" duration="2"/>
    <testCase name="DbUpdateBase Usecase Should throw error when UpdateRepository throws" duration="8"/>
    <testCase name="DbUpdateBase Usecase Should return fail when not found" duration="1"/>
    <testCase name="DbUpdateBase Usecase Should return true when everything is ok" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/services/usecases/base/db-list-base.usecase.unit.ts">
    <testCase name="DbListBase Usecase Should call ListRepository with correct values" duration="1"/>
    <testCase name="DbListBase Usecase Should throw error when ListRepository throws" duration="5"/>
    <testCase name="DbListBase Usecase Should correct data when everything is ok" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/infra/databases/typeorm/typeorm-helper.integration.ts">
    <testCase name="TypeormHelper connect should open a new connection with default name" duration="12"/>
    <testCase name="TypeormHelper connect should reconnect when isConnected is false" duration="6"/>
    <testCase name="TypeormHelper close should close a connection when the connection is open" duration="1"/>
    <testCase name="TypeormHelper close should do nothing when the connection is already closed" duration="1"/>
    <testCase name="TypeormHelper getRepository should return a repository when connection is open" duration="5"/>
    <testCase name="TypeormHelper getRepository should return a repository when connection is closed" duration="5"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/domain/models/result.model.unit.ts">
    <testCase name="Result model should return a success return when ok is called" duration="0"/>
    <testCase name="Result model should return a failed return when fail is called" duration="1"/>
    <testCase name="Result model should throw a error when call getValue from a failed result" duration="8"/>
    <testCase name="Result model should throw error when result isSuccess and have error" duration="2"/>
    <testCase name="Result model should throw error when result failed dont have a message" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/services/usecases/base/db-find-base.usecase.unit.ts">
    <testCase name="DbFindBase Usecase Should call FindRepository with correct values" duration="1"/>
    <testCase name="DbFindBase Usecase Should throw error when FindRepository throws" duration="4"/>
    <testCase name="DbFindBase Usecase Should return undefined when data was not found" duration="1"/>
    <testCase name="DbFindBase Usecase Should return correct data when everything is ok" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/services/usecases/base/db-hard-delete-base.usecase.unit.ts">
    <testCase name="DbHardDeleteBase Usecase Should call HardDeleteRepository with correct values" duration="1"/>
    <testCase name="DbHardDeleteBase Usecase Should throw error when HardDeleteRepository throws" duration="5"/>
    <testCase name="DbHardDeleteBase Usecase Should return fail when not found" duration="1"/>
    <testCase name="DbHardDeleteBase Usecase Should return true when everything is ok" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/services/usecases/base/db-soft-delete-base.usecase.unit.ts">
    <testCase name="DbSoftDeleteBase Usecase Should call SoftDeleteRepository with correct values" duration="1"/>
    <testCase name="DbSoftDeleteBase Usecase Should throw error when SoftDeleteRepository throws" duration="4"/>
    <testCase name="DbSoftDeleteBase Usecase Should return fail when not found" duration="1"/>
    <testCase name="DbSoftDeleteBase Usecase Should return true when everything is ok" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/services/usecases/base/db-create-base.usecase.unit.ts">
    <testCase name="DbCreateBase Usecase Should call CreateRepository with correct values" duration="1"/>
    <testCase name="DbCreateBase Usecase Should throw error when CreateRepository throws" duration="3"/>
    <testCase name="DbCreateBase Usecase Should return success result with created data when everything is ok" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/infra/monitoration/pino-logger.adapter.unit.ts">
    <testCase name="PinoLoggerAdapter should call debug with correct values" duration="1"/>
    <testCase name="PinoLoggerAdapter should call info with correct values" duration="0"/>
    <testCase name="PinoLoggerAdapter should call warn with correct values" duration="1"/>
    <testCase name="PinoLoggerAdapter should call error with correct values" duration="1"/>
    <testCase name="PinoLoggerAdapter should call fatal with correct values" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/infra/validators/joi.adapter.unit.ts">
    <testCase name="JoiAdapter should return a result ok when passed correct data" duration="1"/>
    <testCase name="JoiAdapter should convert data when its possible" duration="1"/>
    <testCase name="JoiAdapter should return a result fail when passed incorrect data" duration="2"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/domain/models/error.model.unit.ts">
    <testCase name="Error model should return notFound error" duration="1"/>
    <testCase name="Error model should return invalidParams error" duration="1"/>
    <testCase name="Error model should return unauthorized error" duration="1"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/main/middlewares/content-type.middleware.integration.ts">
    <testCase name="Content Type middleware should return default content type as json" duration="14"/>
    <testCase name="Content Type middleware should return xml content type when forced" duration="4"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/main/middlewares/no-cache.middleware.integration.ts">
    <testCase name="NoCache middleware should disable cache" duration="13"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/main/middlewares/cors.middleware.integration.ts">
    <testCase name="CORS middleware should enable CORS" duration="6"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/main/middlewares/body-parser.middleware.integration.ts">
    <testCase name="Body-parser middleware should parse body as json" duration="10"/>
  </file>
  <file path="/mnt/Library/workspace/boilerplates/api/src/main/routes/health.routes.integration.ts">
    <testCase name="/health routes Should return health message" duration="13"/>
  </file>
</testExecutions>